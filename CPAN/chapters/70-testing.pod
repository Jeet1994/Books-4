
=head0 Testing

X<Testing> Testing is a indispensable stage in every modern software
development cycle. Tests can help asserting that software is
working properly, and also to make sure that software behavior is
kept when major re-factors to the code are performed.

In this chapter we introduce some important modules that can be used
to create and maintain a suite of heterogeneous tests. These
modules can be used to write tests for most of the common situations,
but there are a lot more. Search CPAN for a module to help test your
code before starting to write your own, most probably someone has already
been in the same situation.

Most of the module starter tools will create a directory for tests, with
some simple tests, and also a way to run your test suite. It's up to the
developers to write and maintain further test files to cover as much as
possible of the code. We hope that the modules described in the following
sections help to perform this task.

Except some comparisons and simple situations, most of the test cases fall
in this philosophy: execute some snippet of code, and compare the result
with the correct answer. The way you provide this snippet of code and
capture the result may vary, and that is one of the main reasons to have
such a great panoply of modules to implement tests. That, and the tools
that provide shortcuts to more common tests.

=head1 Test::Simple

X<Module, Test::Simple>X<Test::Simple>

=begin CPANinfo

B<Version:> 0.98

B<CPAN:> L<http://search.cpan.org/dist/Test-Simple>

=end CPANinfo

This module provides a simple and intuitive framework to start creating
tests. This can be the place to start. The simple test you can have is
something in the lines of:

=begin Perl

  use Test::Simple tests => 1;
  ok('true' eq 'true', 'the test of truth');

=end Perl

The first line loads the C<Test::Simple> X<Test::Simple>
X<Module, Test::Simple> module, and defines how many tests will run.
The number of tests to run is a mandatory requirement
of this module. The second line of this small snippet implements a test.
This test uses the C<ok> function that has two arguments: first is
the expression validating the requirement, in this simple case a simple
string comparison is performed, and a second optional argument which
is the name of the test. Variables can be used has in any other common
expression, for example:

=begin Perl

  use Test::Simple tests => 2;

  my $age = 24;
  my $day = 35;

  ok($age > 0, 'valid age');
  ok($day <= 31, 'valid day');

=end Perl

In this later case variables and binary operators are being used in the
expression passed to the C<ok> function. Bottom line, if the result of
evaluating the expression given as argument is true the result of the
test is ok, otherwise the test is not ok. Running the above script you
would get:

  1..2
  ok 1 - valid age
  not ok 2 - valid day
  #   Failed test 'valid day'
  #   at t.pl line 7.
  # Looks like you failed 1 test of 2.

Remember that the second argument passed to the C<ok> function is simply
the name of the test for easy reference, and is optional.

The main goal of this module is to get you started writing tests.
C<Test::More> X<Test::More> X<Module, Test::More> in the next section is
the next typical step for building a test suite.

=head1 Test::More

X<Module, Test::More>X<Test::More>

=begin CPANinfo

B<Version:> 0.98

B<CPAN:> L<http://search.cpan.org/dist/Test-Simple>

=end CPANinfo

If it is your first time writing tests you should start by taking a
look at C<Test::Simple> X<Test::Simple> X<Module, Test::Simple>.
After C<Test::Simple> X<Test::Simple> X<Module, Test::Simple> this is the
next place to go. This module is a drop in replacement for C<Test::Simple>
X<Test::Simple> X<Module, Test::Simple> which means that you can start

The first major difference is that sometimes you are not sure how many
tests you are going to run. To circumvent this problem you can use the
following approach:

=begin Perl

  use Test::More;
  # do tests
  done_testing;

=end Perl

Has you can see no plan (number of tests) are defined we the module is used
in line 1. After all the tests are executed the C<done_testing> function
is called to let the testing framework know that all the tests have been
executed. You can provide an extra argument to this function which is
the number of tests that were executed if you can calculate it easily.

Some new useful functions are also introduced in this module, and has
stated earlier the C<ok> function is still provided and has the same
behavior as in C<Test::Simple> X<Test::Simple> X<Module, Test::Simple>.
C<is> is another function that can be used, for example:

=begin Perl

  my $got = 12;
  my $expected = 12;

  is( $got, $expected, 'simple test' );

=end Perl

The C<is> function requires at least two arguments, and when is called
performs a comparison between these two arguments, if this comparison
evaluates as a true value then the test passed. There is a dual for this
function called C<isnt> that will consider the test as passed if the
result of evaluating the expression of comparing the two first arguments
is not true.

The C<like> function works in a similar way but instead of doing an equals
comparison between the first two arguments if tries to match the first
argument to the second, being the second argument a regular expression, for
example:

    like( $day, qr/\d+/, 'day ok' );

The C<unlike> function has a similar behavior but the test passes if
the first argument does not match the regular expression given as second
argument. Common to all these functions is the third argument, which is
the name of the test and is optional.

Scalar variables can hold references for complex that structures, if you
wish to compare these data structure you should use the C<is_deeply> function

     is_deeply( $data, $reference, 'data is equal' );

For a more complete way for comparing complete data structures that a
look at the C<Test::Deep> X<Test::Deep> X<Module, Test::Deep> module.

Another useful function is the C<use_ok> function, that can be used
to verify if a module can be loaded correctly. For example:

      use_ok( 'Test::more' );

This can be used that a module is syntax error free and that the Perl
compiler can load this module.

We only described some of the features that this module provides for
maintaing a test suite, for a complete list of functions read the module
documentation.

=head1 Test::Deep

X<Module, Test::Deep>X<Test::Deep>

=begin CPANinfo

B<Version:> 0.108

B<CPAN:> L<http://search.cpan.org/dist/Test-Deep>

=end CPANinfo

=head1 Test::Output

X<Module, Test::Output>X<Test::Output>

=begin CPANinfo

B<Version:> 1.01

B<CPAN:> L<http://search.cpan.org/dist/Test-Output>

=end CPANinfo

C<Test::Output> X<Test::Output> X<Module, Test::Output> is another handy
module for testing. Sometimes you want to be able to test if your code
is producing the correct output. So, we would like to capture the output
of executing this code and compare it with the correct result. We can use
this module to achieve this, for example, imagine you have a function that
prints something to the standard output  and we want to test if this function
is working properly. For this we can use the C<stdout_is> function provided
by this module has shown in the following snippet:

=begin Perl

  use Test::More tests => 1;
  use Test::Output;

  sub function {
    print "testing is good!";
  }

  stdout_is(\&function, 'testing is good!', 'simple test');

=end Perl

C<stderr_is> can be used to validate the output sent to the standard error
pipe in a similar way. If you wish to test the full output of your code,
combining the standard and error output (typically C<STDERR> and C<STDOUT>)
the C<combined_is> function can be used. For example:

=begin Perl

  use Test::More tests => 1;
  use Test::Output;

  sub function {
    print STDOUT "hello";
    print STDERR "World";
  }

  combined_is(\&function, 'helloWorld', 'simple test');

=end Perl

Another very commonly used function in this module is the C<output_is>
function, which has ax extra argument, so that you can explicitly test
what is being written to C<STDERR> and C<STDOUT>. Using a similar example
to the ones already shown we could have something like:

=begin Perl

  use Test::More tests => 1;
  use Test::Output;

  sub function {
    print STDOUT "hello";
    print STDERR "World";
  }

  output_is(\&function, 'hello', 'World', 'simple test');

=end Perl

In this case we are using the C<output_is> function to validate that the
output from running the code to C<STDOUT> is C<hello> and to C<STDERR> is
C<World>.

Similar to the functions described earlier this module also provides 
the typical variants: C<*_isnt>, C<*_like> and C<*_unlike>. For more
information on these specific functions refer to the modules' documentation.

=head1 Test::TCP

X<Module, Test::TCP>X<Test::TCP>

=begin CPANinfo

B<Version:> 1.13

B<CPAN:> L<http://search.cpan.org/dist/Test-TCP>

=end CPANinfo

=head1 Devel::Cover

X<Module, Test::Output>X<Test::Output>

=begin CPANinfo

B<Version:> 0.78

B<CPAN:> L<http://search.cpan.org/dist/Devel-Cover>

=end CPANinfo

=cut

=begin SeeAlso

If it is your first time writing tests C<Test::Tutorial> X<Test::Tutorial>
is the place to start.

C<Test> is the namespace dedicated to modules related with testing in
CPAN.

=end SeeAlso

=cut

## Local Variables:
##  ispell-local-dictionary: "english"
##  mode: flyspell
## End:
