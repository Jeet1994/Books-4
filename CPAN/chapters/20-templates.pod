
=head0 Template Engines

Templates are documents with place-holders that are filled with values
to produce final documents. For example, a corporate letter to send to
all employees in a company, where the name will be personalized.

The usage of templates is a typical methodology to separate code from
presentation, and are especially known for their relevance for web
frameworks that claim to follow the MVC (Model--View--Controller)
software architecture. Templates can be used to generate all type of
text: pure text, HTML, XML or even LaTeX documents.

There is a bunch of templating modules on CPAN. We chose three:

=over

=item C<Text::Template>

A simple template engine. It embeds Perl into the template text,
surrounding it by curly braces. This makes the template engine very
powerful and easy to understand by Perl programmers. In the other
hand, makes it hard to use by other users, like designers.

=item C<HTML::Template::Pro>

This is a reimplementation of C<HTML::Template>, but using some C<C>
code, making it faster. Its main advantage is being smaller than
C<Template::Toolkit>, have a syntax resembling HTML, and being
relatively fast.

=item C<Template::Toolkit>

The complete template engine, and probably the most common choice. It
is powerful, configurable and expendable. Has some dependencies,
namely the requirement for a C<C> compiler.

=item C<Text::Xslate>

This is a relatively new template engine, that has been getting the
attentions recently. It claims to be scalable, and fastest than
C<Template::Toolkit>. It defines a new syntax named Kolon, but also
includes a compatibility module that makes the migration from
C<Template::Toolkit> easier.

=back

=head1 Text::Template

X<Module, Text::Template>X<Text::Template>

=begin CPANinfo

B<Version:> 1.45

B<CPAN:> L<http://search.cpan.org/dist/Text-Template>

=end CPANinfo

This module was designed to produce any kind of text files. Its syntax
is not based in HTML or any other known mark-up language, but in Perl
blocks. This makes it easier to understand by any Perl programmer (but
harder for designers, for example).

The module is stable for some time: the last stable version is from
2003! It doesn't have any dependency other than Perl itself, making it
easy to install in any Perl environment.

=head2 *Variable Notation

A template with simple place-holders is easy to define. Just create a
text file (or even a string) and curly bracesN<< If you do not like to
have curly braces as delimiters you can configure C<Text::Template> to
use some other characters. For example, C<< $tmpl->fill_in(DELIMITERS
=> [ '[%', ']%' ]) >> would change the delimiters to C<[%> and C<%]>
respectively. >> to delimit the predefined text from the place-holders
variables:

   Dear { $name }:
   
   I am sorry to inform that you are fired. Your compensation
   is { $compensation{$name} } euro.
   
   Best regards, your boss.

As the example illustrates, you can insert any type of variable
between the curly braces. If the above text is saved in a file named
"C<fire.tmpl>" you can generate the text for a list of employees with
the following code:

=begin Perl

 use Text::Template;

 my $tmpl = Text::Template->new(SOURCE => 'fire.tmpl') or die;

 my %compensation = (John => 100, Mary => 300 );

 for my $employee (keys %compensation) {
   my $text = $tmpl->fill_in( HASH => {
                             name => $employee,
                     compensation => \%compensation });
   print $text;
 }

=end Perl

Line 3 creates a new C<Text::Template> object, specifying where the
template file it. If it fails returns an undefined variable. You can
use the C<$Text::Template::ERROR> variable in the C<die> command to
consult what happens when it fails.

Line 8 fills the template for each employee. The C<fill_in> method can
receive the variables to be filled in the template in two different
ways. In this case we are passing a hash reference, where keys are
variable names and their values the respective variable values.

Another option would be to specify a package where the variables will
come from. A variable C<$x> will be replaced by the C<$Package::x>.

  $tmpl->fill_in( PACKAGE => "Foo::Bar");

You can even suppress the package name, and C<Text::Template> will use
the current package. In this case the variables being shared with the
template engine should not be declared with C<my> but C<our>:

=begin Perl

 use Text::Template;

 my $tmpl = Text::Template->new(SOURCE => 'fire.tmpl') or die;

 our %compensation = (John => 100, Mary => 300);
 our $name;

 for  $name (keys %compensation) {
   my $text = $tmpl->fill_in();
   print $text;
 }

=end Perl

Take care when using the package approach. If you change variables'
values inside your template, they will be propagated back to your
code.

Another useful option to the C<fill_in> method is C<OUTPUT>. Its value
must be a file handle. The result of filling the template will be
printed to that file instead of being returned. The following code
will create a text file for each employee:

=begin Perl

 use Text::Template;

 my $tmpl = Text::Template->new(SOURCE => 'fire.tmpl') or die;

 our %compensation = (John => 100, Mary => 300);
 our $name;

 for  $name (keys %compensation) {
   open my $fh, ">", "$name.txt" or die;
   $tmpl->fill_in( OUTPUT => $fh );
   close $fh;
 }

=end Perl

=head2 *Complex structures

Did I tell you that you can write any Perl code inside
C<Text::Template> curly braces? But you can. And that is the way you
can add advanced functionality to your template. First, you can format
numbers calling the built-in command C<sprintf>:

  My current debt is { sprintf("%.2f", $value) } euro.

If you pass an array to the C<fill_in> method you can cycle the array
in your code:

  This is my wish list:
  { for $item (@wishlist) { $list .= " * $item\n"; } $list }

What this code does is cycle the C<wishlist> array and construct a
string with the text to be included in the template. At the end, we
return its content. C<Text::Template> makes a special variable C<$OUT>
available in your code, making the above code easier to read:

  This is my wish list:
  { for $item (@wishlist) { $OUT .= " * $item\n"; } $list }

With this variable and Perl code you can do mostly anything in your
template.

=head1 HTML::Template::Pro

X<Module, HTML::Template::Pro>X<HTML::Template::Pro>
X<Module, HTML::Template>X<HTML::Template>

=begin CPANinfo

B<Version:> 0.9504

B<CPAN:> L<http://search.cpan.org/dist/HTML-Template-Pro>

=end CPANinfo

C<HTML::Template::Pro> is an extended version of
C<HTML::Template>. Most of the functionalities are available on both,
but the C<::Pro> is faster as it is partially implemented in C<C>.

=head2 *Variable Notation

These modules were developed to generate HTML (although you can
generate anything with them). The syntax is similar to an HTML tagN<<<
With C<HTML::Template::Pro> is possible to write commands as if they
were XHTML tags: C<< <TMPL_VAR NAME='variable_name'/> >>. >>>:

   <TMPL_VAR NAME=variable_name>

The first part (C<TMPL_VAR>) is the command name (we'll see other
shortly) to include a variable value. Follows a key/value pair
pointing C<NAME> to the name of the place holder. Consider the
following HTML template:

   <p>Dear <TMPL_VAR NAME=name>:</p>
   
   <p>I am sorry to inform that you are fired. Your compensation
   is <TMPL_VAR NAME=compensation> euro.</p>
   
   <p>Best regards, your boss.</p>

This template can be filled with the following code:

=begin Perl

 use HTML::Template::Pro;

 my $tmpl = HTML::Template::Pro->new(filename => 'letter.tmpl');

 my %compensation = (John => 100, Mary => 300);

 for my $name (keys %compensation) {
   $tmpl->param( name         => $name ); 
   $tmpl->param( compensation => $compensation{$name} );
   print $tmpl->output();
 }

=end Perl

Changing the code above to generate a separate HTML file per letter:

=begin Perl

 use HTML::Template::Pro;

 my $tmpl = HTML::Template::Pro->new(filename => 'letter.tmpl');

 my %compensation = (John => 100, Mary => 300);

 for my $name (keys %compensation) {
   $tmpl->param( name         => $name,
                 compensation => $compensation{$name} );

   open my $fh, ">", "$name.html" or die;
   $tmpl->output(print_to => $fh);
   close $fh;
 }

=end Perl

As a final note, although the syntax is meant to simulate normal HTML
tags, you can use them inside HTML tags:

   <img src="<TMPL_VAR NAME=image_url>" />

This can even be simplified, if you prefer.

   <img src="<TMPL_VAR image_url>" />

=head2 *Complex structures

Complex data structures can be managed directly in the
template. C<HTML::Template::Pro> supports conditionals, loops or
complex Perl expressions.

Lists are typical structures in web pages (together with tables and
other information structuring elements). To generate a list using
C<HTML::Template::Pro> you use the C<TMPL_LOOP> tag, like in this
example:

   <ul>
      <TMPL_LOOP NAME=employees>
         <li>Name: <TMPL_VAR NAME=name> Age: <TMPL_VAR name=age></li>
      </TMPL_LOOP>
   </ul>

To make C<HTML::Template::Pro> unroll this loop you set a parameter
named C<employees> that is an array reference of hash references (one
hash reference per employee). Each hash reference will include two
keys, C<name> and C<age>, whose values would be used to fill in the
template:

=begin Perl 

  $tmpl->param( employees => [
                     { name => "John", age => 35 },
                     { name => "Mary", age => 27 },
               ]);

=end Perl

Nested loops work just as you expect:

   <ul>
      <TMPL_LOOP NAME=employees>
        <li><TMPL_VAR NAME=name> children:
            <ul>
               <TMPL_LOOP NAME=childs>
                   <li><TMPL_VAR NAME=name></li>
               </TMPL_LOOP>
            </ul>
        </li>
      </TMPL_LOOP>
   </ul>

To fill in this template use the following code:

=begin Perl

  $tmpl->param(
      employees => [
         { name => "John",
           childs => [ { name => "Peter" }, { name => "James" }] },
         { name => "Mary",
           childs => [ { name => "Anne" } ] },
      ]
  );

=end Perl

Conditional structures are easy as well. Conditional generation is
obtained with C<TMPL_IF> that checks if the variable whose name is
used in the tag is true or false. Also, the name of a loop can be used
in a C<TMPL_IF>, that will hold a true value if the array is not empty
(if the loop needs to be unroll).

The above example of employees' children can be rewritten to output
correctly employees who doesn't have a child:

   <ul>
     <TMPL_LOOP NAME=employees>
       <TMPL_IF NAME=childs>
         <li><TMPL_VAR NAME=name> children:
           <ul>
             <TMPL_LOOP NAME=childs>
               <li><TMPL_VAR NAME=name></li>
             </TMPL_LOOP>
           </ul>
         </li>
       <TMPL_ELSE>
         <li><TMPL_VAR NAME=name> does not have any child.</li>
       </TMPL_IF>
     </TMPL_LOOP>
   </ul>

The C<TMPL_ELSE> command can be omitted. C<TMPL_UNLESS> and
C<TMPL_ELSIF> can also be used, just like standard PerlN<< Note
however that C<TMPL_ELSIF> is currently not supported on
C<HTML::Template>. >>.

Templates can be included from other templates (up to a recursive
level of 10 includes). This is achieved using the C<TMPL_INCLUDE> tag:

     <TMPL_INCLUDE NAME="filename.tmpl"/>

If the file name starts with a slash, then it is considered an
absolute path. If not, the template file will be searched locally. The
C<new> constructor for the C<HTML::Template::Pro> object can receive
an optional argument to set an array of possible paths where templates
can lie. If a template file is not found in the current working
directory, these paths will be searched in order:

=begin Perl

  my $tmpl = HTML::Template::Pro->new(
               filename => 'file.tmpl',
               path => [ '/my/templates', '/some/other/templates' ]
             );

=end Perl

Finally, C<HTML::Template::Pro> supports simple expressions to be
used. They can be a security vulnerability. If you think you need
them, probably you want to give a look into C<Template::Toolkit>.

=head2 *Filters

C<HTML::Template::Pro> supports a very simple filtering
mechanism. When interpolating a template your variable can hold very
different kind of data, ranging from a simple string, to an URL, an
HTML block or even Java Script code. The way this data will be
interpolated will change, and probably you will need to escape some
special characters. This can be accomplished using the C<TMPL_VAR>
tag, and adding a C<ESCAPE> option:

  <input name="param" type="text"
         value="<TMPL_VAR ESCAPE=HTML NAME="param">"/>

This will ensure that all HTML characters will be properly
encoded. The C<ESCAPE> option accept the following values: C<NONE> to
disable escaping, C<URL> to encode non-standard URL characters (spaces
replaced by C<+>, C</> replaced by C<%2F>, etc), C<HTML> to encode
HTML special characters (C<< < >>, C<< > >> and C<< & >>), and C<JS>
to encode JavaScript. for further details read
C<HTML::Template::SYNTAX>.

=head1 Template::Toolkit

X<Module, Template::Toolkit>X<Template::Toolkit>

=begin CPANinfo

B<Version:> 2.22

B<CPAN:> L<http://search.cpan.org/dist/Template-Toolkit>

=end CPANinfo

C<Template::Toolkit> is a complex full featured and extensible
templating engine. Other than the documentation that gets installed in
your system and the documentation available from
L<http://template-toolkit.org/>, there is a good book from O'ReillyN<<
Perl Template Toolkit, by Darren Chamberlain, Dave Cross and Andy
Wardley. O'Reilly 2003.>> where you can find in depth details.

C<Template::Toolkit> (we will call it C<TT> during this section) is
mostly used for templating HTML documents, and although our examples
will be with HTML documents (as C<Template::Toolkit> is useful if you
want to learn a web framework), you can use it to generate all kind of
documents.

When installing, note that the distribution name is C<Template>.

=head2 *Variable Notation

The syntax to annotate C<TT> variables and commands is
configurable. By default they are enclosed in two delimiters: C<[%>
and C<%]>N<< They can be changed using C<START_TAG> and
C<END_TAG> attributes when creating the C<TT>
object. >>. Follows a simple C<TT> template, using only variablesN<<
Consider that the template file is saved in a file named
C<letter.tmpl>. >>:

   <p>Dear [% name %]:</p>
   
   <p>I am sorry to inform that you are fired. Your compensation
   is [% compensation %] euro.</p>
   
   <p>Best regards, your boss.</p>

The first thing to note is that the syntax is very clear. Second,
there are no dollar signs. This is a design feature of C<TT>, making
it easier to use by non Perl programmers (for example, Web designers).

The code needed to interpolate this template for two different
employees is quite simple: first create a C<Template> object (that can
be used to process more than one template), then ask this object to
interpolate a specific template with some variables.

=begin Perl

  use Template;
  my $tmpl = Template->new();
  
  my %compensations = ( John => 100, Mary => 300 );

  for my $employee (keys %compensations) {
     my $vars = { name         => $employee,
                  compensation => $compensations{$name}};
     $tmpl->process('letter.tmpl', $vars);
  }

=end Perl

Note that no output is specified or C<print> is used. This is because
C<process> prints by default t C<STDOUT>. To create a file for each
employee is simple as well, just add a third argument to the
C<process> method, as follows:

   $tmpl->process('letter.tmpl', $vars, "$name.html");

There are more than a dozen configuration options for the C<TT>
parser. Here we will just add that C<TT> can be configured to process
templates in different encodings.

If your variables have C<UTF-8> values, then add a C<binmode> option
at the end of the C<process> directive:

   $tmpl->process('letter.tmpl', $vars, "$name.html",
                  binmode => ':utf8');

In the other hand, if your template files are already in C<UTF-8> and
include C<UTF-8> characters, you can set the C<encode> option globally
in the C<TT> constructor:

   my $tmpl = Template->new( { ENCODING => 'utf8' });

C<TT> variables can be more complex than just the variable name. For
example, there is the possibility to get the C<n>G<th> element from a
list, the value from an hash with a specific key, call a method,
etc. Some of these will be presented in the next loop and conditional
examples.

=head2 *Complex structures

C<TT> supports a relatively large language, much more than just
conditional or loop constructs. This language lets the user insert
files, process sub-templates, wrap templates, use conditionals and
loops and even throw exceptions. We will focus some of them in this
section.

To start with the more natural constructs, C<TT> supports conditionals
just like Perl itself: C<if>, C<unless>, C<elsif> and
C<else>. Conditions are just like Perl, just remember that you do not
prefix variables with the dollar "C<$>" or at "C<@>" signs, and that
you should use numeric comparison operators always.

  Dear [% name %]:
  [% IF salary > 3000 %]
    <p>You are fired!</p>
  [% ELSIF salary > 1500 %]
    <p>Your salary will be raised by 10%.</p>
  [% ELSE %]
    <p>Do you still work here? Silly!</p>
  [% END %]

Just like in Perl, you can use lists and variables instead of
conditions. They will be evaluated as a boolean value.

Loops are supported both as C<while> or C<foreach> constructs. Follows
an example of using C<while>, to calculate a twelve month mortgage
table with a 5% flat tax, given a variable C<mortgage> with the
valueN<< If you try to use a C<while> loop and your code does not
output anything, probably you have an infinite loop or a loop with
more than 1000 iterations. >>:

  <p>Your mortgage payment in 12 months:</p>
  <ul>
  [% i = 0 %]
  [% WHILE i < 12 %]
    [% i=i+1 %]
    <li>[% i %] month: [% (mortgage / 12) * 1.05 %] euro</li>
  [% END %]
  </ul>

This example also presents the ability to compute values directly in
the template. All place holders with an assignment will compute the
supplied expression, and store the result in the variable. No value
will be interpolated in the template.

The C<foreach> construct is used to cycle through lists. Just like the
C<Perl> counterpart, a local variable is used, and it will iterate
over all the values in the list.

   <ul>
      [% FOREACH employee IN employees %]
         [% IF employee.children %]
         <li>[% employee.name %] children:
           <ul>
             [% FOREACH child IN employee.children %]
               <li>[% child %]</li>
             [% END %]
           </ul>
         </li>
         [% ELSE %]
         <li>[% employee.name %] does not have any child.</li>
         [% END %]
      [% END %]
   </ul>

Fill in this template with the following Perl code. Note how natural
it is to describe in the template how to traverse the data structure.

=begin Perl

  use Template;
  
  my $tmpl = Template->new;
  my $data = {
    employees => [
      { name => "Mary",
        children => [ "Ann" ] },
      { name => "John",
        children => [ "Paul", "Sebastien" ] },
    ],
  };
  
  $tmpl->process("emp.tmpl", $data);

=end Perl

C<TT> can include sub-templates or other files. Including other files
is easy, just use the C<insert> command. Note that the inserted file
will not be processed as a template.

   [% INSERT copyright.html %]

If you want to include a sub-template, you need to use C<process> or
C<include>. They are very similar. The main difference is that
C<include> consider all code in the sub-template to be local. All
changed variables will remain private to that sub-template. In the
other hand, C<process> will make all sub-template changes available in
the calling template.

When using any of these commands you can pass some extra variables
(separated by commas). These are two simple examples:

   [% PROCESS header %]
   [% PROCESS footer year=2011]

There is another including mechanism named C<wrapper>, that instead of
including an external template on a specific point of the current
template, wraps the current template in the external template. This
gets easier to understand with an example. You can have a web page
design (typical header and footer) in a document, named C<layout>,
like this:

   <html>
     <head><title>My brand new site</title></head>
     <body>
       [% content %]
       <div id="copyright">Copyright by me</div>
     </body>
   </html>

Now, instead of rendering this template directly with your Perl code,
interpolating C<content> with your web page, you can render a more
specific template that wraps this header and footer:

  [% WRAPPER layout %]
     <h1>About this site</h1>
     <p>Blah, blah [% somevar %] blah blh</p>
  [% END %]

This template can be rendered directly as a standard template, and
C<TT> will automatically insert the result of processing this template
in the C<layout> template.

=head2 *Filters

C<TT> supports a powerful filtering mechanism. Some filters are
available out of the box, but it lets the user define their own. In
this section we will look into some of the predefined filters.

Filters are functions that take your variables values or sections of
your document and process them in some way. A simple example is the
C<collapse> filter, that will remove all extra spaces and
newlines. Filters can be applied in a block with the C<filter>
keyword:

  [% FILTER collapse %]
     This     is   some
       spaced      text.
  [% END %]

C<TT> will ensure that the output rendersN<< Note that C<TT> is tailored
for HTML output. >> exactly the same, but does not have extra spaces
or new lines:

  This is some spaced text.

Filters can also be applied to the result of a specific C<TT>
command. For instance, we can uppercase the name of a person stored in
the C<name> variable with:

  [% name FILTER uppercase %]

C<TT> makes in-line filtering, just like the shown, easier, trying to
mimic the behavior of shell filters. For instance, quoting HTML
special characters from a variable C<code> is as simple as:

  [% code | html %]

This will ensure that all special HTML characters used in the C<code>
variable are correctly protected. Other useful filter for web
applications is named C<uri>. It filters the text protecting special
characters accordingly with RFC 2396, that is, replacing them by a
percent sign followed by the hex code of the character being replaced
(for example, the usual replacement of space by C<%20>). However, note
that you should not apply this filter to the full URL. For that use
the C<url> filter:

  <a href="[% page_url | url %]">Check this page.</a>

There are a lot of other filters, ranging from simple text
transformation, trimming strings, truncating string, to full Perl code
evaluation. Just be caution on where you use them. A complete
reference is available at
L<http://template-toolkit.org/docs/manual/Filters.html>

=head2 *Virtual Methods

As you might have noticed in the previous sections, C<TT> is a complex
language by itself. This language supports some methods to be called
into variables. As they are not methods directly available on your
code, they are named I<Virtual Methods>. C<TT> includes a set of
predefined ones, but the user can extend this language with his own
methods. This section will present a few of the predefined virtual
methods, so you can start understanding how they work, and later
search for reference on other documents.

These methods are called just as most OO languages, put a dot after
the variable, and the method name. The available methods depend on the
variable type (scalar, hash or array). A full list can be consulted at
L<http://template-toolkit.org/docs/manual/VMethods.html>. Some of the
more relevant method are presented bellow.

=over

=item B<Scalar methods>

The most useful methods are C<defined> to check if the value for a
specific variable is set:

   [% IF var.defined %]  ...  [% END %]

The C<length> returns the length of a string. The C<repeat> method
repeats a string I<n> times, like the following code that renders
I<hohoho>:

   [% name = 'ho' %] [% name.repeat(3) %]

There are methods to C<replace>, C<remove> a regular expression
(substitute it by nothing), or even C<match> and then access each of
the match capture zones, C<split> to divide a string by some
separator, etc.

=item B<Array or lists methods>

For lists, you can use C<first> or C<last> to access the first and
last elements from the array. The C<size> returns the number of
elements, while C<max> returns the index for the last element (size
minus 1).

For lists, the C<defined> method receives the element number to be
tested:

   [% list.defined(4) ? "Yes, defined" : "No, not defined" %]

Other Perl-like methods are also available, like C<reverse>, C<grep>
(receives the regular expression as first parameter), C<join>
(receives the join string as first parameter), C<sort> for string
sort, and C<nsort> for numeric comparisons, C<push>, C<unshift>,
C<shift>, C<pop>, C<slice>, C<splice>, etc.

One interesting feature very useful is that C<sort> or C<nsort> can
receive a list of strings that are used as keys for hash
references. So, if you have a list of hash references, and each hash
reference has a key named C<id>, you can sort those elements with:

   [% FOREACH book IN books.sort('id') %] ... [% END %]

If you use more than one key, they will be used for second level
sorting (if the values are equal for the first key).

=item B<Hash methods>

For hash values you can issue C<keys> to get the keys list, or
C<values> for the values list. The C<items> virtual method returns a
list where each position is a pair (a small list with the key and the
value). Similar is the C<pairs> method:

  [% FOREACH book IN books.pairs %]
    <td> [% book.key %] </td><td> [% book.value %] </td>
  [% END %]

C<sort> and C<nsort> can be used to gather a list of the keys sorted
alphabetically or numerically. Note that you do not need to use the
C<keys> method:

  [% FOREACH bookId IN books.nsort %] ... [% END %]

The C<defined> and C<exists> methods do exactly what you are
expecting. Pass them a key, and they will return a true value if that
key is defined or exists in the hash. It is also possible to define
items form the hash, using the C<delete> method. Pass it any number of
keys you like. They will be removed from the hash (together with their
respective values).

You can access hash values using the key name as if it were a virtual
method C<< [% hash.key1 %] >> or use the C<item> method, with C<< [%
hash.item('key1') %] >>.

=back

This was a quick and condensed look into the existing virtual
methods. Give a look into the documentation for a in depth look with
examples. You can also define your own virtual methods (check
C<Template::Stash> for documentation).

=head1 Text::Xslate

X<Module, Text::Xslate>X<Text::Xslate>

=begin CPANinfo

B<Version:> 1.3000

B<CPAN:> L<http://search.cpan.org/dist/Text-Xslate>

=end CPANinfo

C<Text::Xslate> is inspired in some existing template engines, like
C<Template::Toolkit>, C<Text::MicroTemplate>, C<HTML::Template> and
others. Although inspired by these modules, the author claims that
C<Text::Xslate> has a completely different philosophy: the template
logic, that is, the template code should not be able to access/change
data outside the template without permission.

The notation described in this section is the I<Kolon> syntax, that
uses as delimiters C<< <: >> and C<< :> >>. There is a I<Metakolon>
syntax, that uses C<< [% >> and C<< %] >>, and a I<TTerse> syntax,
that implements a subset of C<Template::Toolkit> syntax.

=head2 *Variable Notation

Place holders are enclosed in C<< <: >> and C<< :> >> as already
mentioned. Variables are written as in Perl, preceded by a dollar
sign:

   <: $name :>

After the variable name you can add a method name (if the variable is
an object), a key value (if the variable is a hash reference) or an
array position (if the variable is an array reference):

   <: $array.2 :>
   <: $hash.key :>
   <: $obj.method :>

If you prefer the array syntax, you can use it as well:

   <: $array[2] :>
   <: $hash["key"] :>
   <: $obj["method"] :>

Using the same template that has being used in the previous sections,
saved as C<letter.tx>:

   <p>Dear <: $name :>:</p>
   
   <p>I am sorry to inform that you are fired. Your compensation
   is <: $compensation[$name] :> euro.</p>
   
   <p>Best regards, your boss.</p>

To fill-in this template we can use the following Perl code, that will
generate a different HTML file per employee:

=begin Perl

  use Text::Xslate;
  my $tx = Text::Xslate->new();
  my %compensation = (John => 100, Mary => 300);

  for my $name (keys %compensation) {
      open OUT, ">", "$name.html" or die;
      print OUT $tx->render('letter.tx',
                            { name         => $name,
                              compensation => \%compensation});
      close OUT;
  }

=end Perl

=head2 *Complex structures

C<Text::Xslate> has the concept of code line, that is, a line in the
template that is completely interpreted as a template command. In the
I<Kolon> syntax they start with a colon (C<:>).

For example, a conditional is written mostly like you would write in Perl:

   : if ($employee.children) {
       <: $employee.name :> has some children!
   : }
   : else {
       <: $employee.name :> does not have any children!
   : }

There are C<for> loops as well, but they have a syntax slightly
different from Perl:

   : for $employees -> $employee {
   :   if ($employee.children) {
       <: $employee.name :> has some children!
   :   } else {
       <: $employee.name :> does not have any children!
   :   }
   : }

Interpolate this template with the following Perl code:

=begin Perl

  use Text::Xslate;
  my $tx = Text::Xslate->new();

  print $tx->render('letter.tx', {
         employees => [
             { name => "Mary", children => ["Anne"] },
             { name => "John" },
         ] } );

=end Perl

C<Text::Xslate> also supports C<while> loops and C<given/when>
conditional structures. Be sure to read the documentation with
caution, as the syntax is tricky, and not exactly like Perl.

There are two distinct ways to include sub-templates. The first is
using the C<include> command, followed by the name of the sub-template
to process. Optionally a hash of further variables to be defined in
the sub-template can be supplied:

   : include "header.tx"
   : include "footer.tx" { date => 'Christmas', copyright => 'me' }

The other approach is to use template cascading. This feature can be
seen as some kind of inheritance between templates, together with the
possibility to use rolesN<< For a better description on roles read the
chapter A<chap:OO> or the documentation of any new Perl
object-oriented framework. >>.

It all starts with the definition of blocks using the C<block>
keyword. Think of blocks as place holders, where some text (or
anything else, in fact) will be placed. Each block has a name and
optionally a default content.

For example, for a web site we can define the basic layout in a
C<base.tx> document, as follows:

  : block header -> {
      Welcome to my Website!
  : }
  : block contents -> { }
  : block footer -> {
      Copyright by me!
  : }

This code defines three zones, and specifies default content for the
header and footer blocks. Note that the content should be placed in
different lines from the commands. If you render this template the
result will be the two lines defined as default content.

We can extend (C<cascade>) this template into another, for example,
C<about.tx> that sets the I<contents> block text:

  : cascade "base.tx"
  : around contents -> {
      My name is Homer Simpson and I like beer.
  : }

The C<cascade> command is telling the template engine this template is
a I<child> from C<base.tx>, and C<around> is redefining the
I<contents> block with some other text. Also relevant is that there is
a C<super> method to call the previous defined block. For instance, to
surround the I<header> block with a new C<div> element we can write
the following template:

  : cascade "base.tx"
  : around header -> {
     <div id='header'>
        :super
     </div>
  : }

The line with the C<super> command will cascade into C<base.tx> and
use its default value.

Similar with C<around> there are the C<before> and C<after> commands
that, instead of redefining the full block, define content to be
placed I<before> or I<after> the block. As an example, the following
template cascades on C<base.tx>, adding an year before the copyright
notice, in the I<footer> block.

  : cascade "base.tx"
  : before footer -> {
        <: $year :>
  : }


Always remember that from your Perl code you must render the more
specific template, the one that cascades into other templates.

Templates cascading is one of the main features from
C<Text::Xslate>. It still supports roles and macros, but these topics
will not be covered in this book.

=head2 *Filters

C<Text::Xslate> has some built-in filters defined, but the definition
of user filters is also simple (unlike, for instance,
C<Template::Toolkit>, that forces to create a new package with the
filter definition).

The two main filters available are C<html> and C<dump>:

    : $var | html       # html-escape the variable content
    : $var | dump       # dump the variable with Data::Dumper

These filters are implemented as functions. This makes it possible to
use them as a standard function call:

    : html($var)

For an example on defining your own filters please refer to
C<Text::Xslate> documentation.

=head2 *Virtual Methods

The C<Text::Xslate> documentation doesn't refer to the methods as
virtual. This section is named this way for homogeneity with the
previous module. Also, there aren't really much methods defined as it
supports a big subset of the Perl language.

Nevertheless, there are three methods that are crucial when cycling
through hashes: C<keys>, C<values> and C<kv>. The first two are quite
straightforward, make it possible to cycle through keys of values:

  : for $data.keys() -> $key {
      * <: $key :> - <: $data[$key] :>
  : }

The C<kv> variant is similar to the C<each> command from Perl. In each
iteration returns a pair, with a key and a value:

  : for $data.kv() -> $pair {
      * <: $pair.key :> - <: $pair.value :>
  : }

For arrays and hashes there is a C<size> method that returns their
number of elements. For arrays there are the typical C<reverse>,
C<join>, C<sort> and C<map>, together with a C<reduce> method.

=begin SeeAlso

Note that this chapter intends to be a gentle introduction to the
described template systems. Each of them has much more that can be
achieved using built-in features, or extending it (especially
C<Template::Toolkit> and C<Text::Xslate>). Use the information in this
chapter as a start point but refer to their documentation for in-depth
information.

C<Mason> X<Mason> X<Module, Mason> is a web framework that
incorporates its own template engine. Some applications support
C<Mason> syntax for templating via plug-ins.

If your C<HTML::Template> templates are slow check X<Module,
HTML::Template::Compiled>X<HTML::Template::Compiled>
C<HTML::Template::Compiled>, that compiles a template into a Perl
program making it faster.

X<Module, Template::Simple> X<Template::Simple> C<Template::Simple> is
a simple and fast template engine. It is written entirely in Perl and
has a modern interface, unlink C<Text::Template> or even
C<HTML::Template>.

X<Module, Text::Template::Simple> X<Text::Template::Simple>
C<Text::Template::Simple> uses the same philosophy from
C<Text::Simple> making Perl itself the templating language. Its main
difference from C<Text::Template> is that the mark-up language has
some extra sugar to configure whether they are place-holders or simple
code blocks with no return text.

=end SeeAlso

=cut

## Local Variables:
##  ispell-local-dictionary: "english"
##  mode: flyspell
## End:
