
=head0 Web Frameworks

Web development in Perl started with the X<CGI> X<Module, CGI> C<CGI>
module. It includes mechanisms to generate HTML from Perl statements,
and to access CGI parameters, sessions and cookies. Although it is a
quite powerful method it shows the sign of age, and there are a wide
variety of other tools that make Web development easier, more
structured and faster. These are the main reasons why the C<CGI>
module will not be focused in this chapter. Yet another reason is the
quantity of books and tutorials that are available that teach how to
develop with C<CGI>.

There are a lot of Web Frameworks in Perl, and with the advent of
C<PSGI> and C<Plack> X<PSGI> X<Module, PSGI> X<Plack> X<Module, Plack>
the interface between web servers and Perl got more user friendly,
that lead to even more frameworks.

This book does not intent to be a full reference to CPAN modules, or
to be a in-depth book on too technical aspects. These reasons made us
decide to not exploit C<PSGI> or C<Plack> directly, but present
frameworks that use them, like C<Dancer> or C<Mojolicious>. With this
same idea in mind, we will not cover deployment, as there are too many
options (from Apache C<mod_perl>, FastCGI running under Apache or
nginx, using Starman, and others). We will just describe how to get
some code running for developing purposes. Then you must read the
documentation for the specific deployment method you plan.

This section will B<introduce> Web programming using four different
web frameworks:

=over

=item B<Catalyst>

The X<Module, Catalyst> X<Catalyst> C<Catalyst> web framework is
probably the most well known nowadays. It is a complete and efficient
web framework. Its main drawback if the complexity of projects for new
developers. There are some book about it, which explain why our
section on it is quite reduced.

=item B<Mason>

The success of PHP lead to some similar approaches for other
languages. There are different tries to get a module with a similar
philosophy, but C<Mason> X<Module, Mason> X<Mason> is probably the
only one that was widely used. Not because of following a PHP-like
approach, but for taking it a step forward.

=item B<Mojoliciou>

C<Mojolicious> was developed after C<Catalyst>, by the same main
author. The idea was to simplify it, making it easier to use and
lighter. 

=item B<Dancer>

Heavily inspired by Ruby Sinatra, C<Dancer> is gaining adepts in the
last monthes. The fact of one of the book authors is a C<Dancer>
developer was a reason good enough to include it here.

=back

=head1 Catalyst

X<Module, Catalyst> X<Catalyst>

=head1 Mason

X<Module, Mason> X<Mason>

=head1 Mojolicious

X<Module, Mojolicious> X<Mojolicious>

=head1 Dancer

X<Module, Dancer> X<Dancer> C<Dancer> has a nice command that eases
the task of creating the required files to run a C<Dancer> web
site. In fact, not those files are required, but the C<dancer>
application creates a typical Perl module structure and a simple
running web site. Use the following command:

    dancer -a MyApp

A folder named C<MyApp> will be created, with a bunch of files. In the
next section we will analyze this folder structure.

=head2 *Default Dancer Application Structure

=cut

## Local Variables:
##  ispell-local-dictionary: "english"
##  mode: flyspell
## End:
